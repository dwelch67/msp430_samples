
This second installment of infrared (as in remote controls for tvs and
dvd players and such) examples completes an infra red decoder for one
of the popular protocols.

This web page

http://www.sbprojects.com/knowledge/ir/index.php

Does a good job of talking about and creating a visual picture of what
is going on.

All infrared receivers are not created equal, you need to do your
research for a number of different reasons.  First there are what I
call modules, like the one used in this project that not only receives
the light and turns it into electrical pulses, but also demodulates it
back to the protocol.  You dont have to deal with the 38Khz pulses but
instead the protocol which has pulses in the milliseconds to hundreds
of microseconds duration.  If you were building a set top box of some
sort like yet another roku, you should choose components that properly
match the carrier frequency.  Dont use 38Khz parts for a 40Khz carrier.
You can get away with it but the timing will be off, the demodulated
signals may be too long or short, or you might not be able to receive
the signals from as far or near as you would have normally.

Another important reason to do your homework is because these three pin
modules do not use the same pinout, plug any old module into any old board
design and you will let some of that smelly smoke out of one of the
devices.

So despite that this project will use a receiver module that is available
at Sparkfun, a single source for lots of these kinds of toys.

http://www.sparkfun.com/products/10266

Having access to an oscilloscope is always good for debugging
software/projects, but not absolutely required for this one.  If you
happen to have access to a scope, or even if you dont it is good to
have a few of these around:

http://www.sparkfun.com/products/9873

For this project you can use it as a source for power, spread the legs
apart, shove the power and ground pins into power and ground and hook
the scope probe on the data out.  For this device you should see the
signal sit normally at the source voltage, around 3.3 volts.  You are
looking for a falling edge to trigger on, single trigger.  Aim your
remote and look at the signal.  It should look like a demodulated and
inverted version of what you see in the above sbproject ir web pages.
Why this is useful is because it helps you figure out what you are trying
to decode, or may help you decide which remote you owm has the protocol
you want to decode.

The scope is not required just helps to provide some sanity if you
start having problems figuring out your decoder.

Personally I prefer the protocols that have a distinctive start pattern.
Look at the JVC, NEC, and Philips RC-6 as an example.

The protocol being docoded by this example appears to be the NEC protocol
starting with a 9ms start pulse then a 4.5ms pulse when sending a code
and 2.25ms for a repeat.  Also it has a 32 bits of data in the protocol.

If we start with the uart01 example which sets the msp430 for 16MHz
sets the timer to a divide by 8, 2MHz.  A 9ms pulse would be
0.009 * 2000000 = 18000.

So the first thing to do is wire it up, and monitor the ir input to the
msp for a falling edge, when you see that snapshot the timer, then when
you see a rising edge, take a snapshot of the timer.  If the differencie
is well below 18000, try again, when you get one that is somewhat close
then blink an led or do what I do and print the timer count out the
uart.  Then wrap a min/max around it and print that out...


    while(1)
    {
        while(P1IN&0x10) continue;
        a=TAR;
        while(1) if(P1IN&0x10) break;
        b=TAR;
        c=b-a;
        if(c<(16000)) continue;
        if(c<min) min=c;
        if(c>max) max=c;
        hexstrings(min); hexstring(max);
    }

This will give you a feel for what your system really thinks the length
of the pulse is.  And you can start to get that warm fuzzy feeling that
something is working, a small taste of success.

Now measure the next pulse, depending on your remote and whether it is
this protocol or not you may see two different values a longer value
and shorter.

    while(1)
    {
        while(P1IN&0x10) continue;
        a=TAR;
        while(1) if(P1IN&0x10) break;
        b=TAR;
        c=b-a;
        if(c<(17200-1720)) continue;
        if(c>(17200+1720)) continue;
        while(P1IN&0x10) continue;
        a=TAR;
        c=a-b;
        if(c<min) min=c;
        if(c>max) max=c;
        while(1) if(P1IN&0x10) break;

        hexstrings(min); hexstring(max);
    }

And now start looking at the short low pulse.  So far we are looking for
a long low pulse, a not as long but long high pulse, and then a short
low pulse.

    while(1)
    {
        while(P1IN&0x10) continue;
        a=TAR;
        while(1) if(P1IN&0x10) break;
        b=TAR;
        c=b-a;
        if(c<(17200-1720)) continue;
        if(c>(17200+1720)) continue;
        while(P1IN&0x10) continue;
        a=TAR;
        c=a-b;
        while(1) if(P1IN&0x10) break;
        b=TAR;
        c=b-a;
        if(c<min) min=c;
        if(c>max) max=c;

        hexstrings(min); hexstring(max);
    }

If we are decoding the right protocol and have not just been lucky with
say the JVC protocol described on the sbprojects page, then there should
be 32 data bits each ending in one of these low short pulses.

    while(1)
    {
        while(P1IN&0x10) continue;
        a=TAR;
        while(1) if(P1IN&0x10) break;
        b=TAR;
        c=b-a;
        if(c<(17200-1720)) continue;
        if(c>(17200+1720)) continue;

        while(P1IN&0x10) continue;
        a=TAR;
        c=a-b;
        while(1) if(P1IN&0x10) break;
        if(c<8000)
        {
            continue;
        }
        for(sb=0;sb<32;sb++)
        {
            while(P1IN&0x10) continue;
            a=TAR;
            c=a-b;
            while(1) if(P1IN&0x10) break;
            b=TAR;
            c=b-a;
            if(c<min) min=c;
            if(c>max) max=c;
        }

        hexstrings(min); hexstring(max);
    }

You can both tune your system for the remote and/or get a warm fuzzy
feeling that you are decoding what might be the right protocol and
the low pulse is within the acceptable error.

The last few steps for decoding this protocol would be to measure the
long/short data pulses or at least distingushing between them.

Now what I found is that some of my remotes follow the nec protocol
as defined at the sbprojects page, where you have 8 data bits then
those 8 bits repeated, inverted, then 8 more bits, and those 8 bits
repeated, inverted.  But not all of the remotes do this.  Likewise
the NEC protocol on that page defines a different start pattern for
a repeat.  You get one pattern with the code, then a bunch of repeats
until you let the button go.  Again some of my remotes do this some
dont, sometimes they just blast the pattern forever, some blast a few
and stop.  My roku remote, doesnt do the inverted pattern thing, when
it repeats it sends the same pattern except the last bit is a inverted.
Using my arbitrary definition of one and zero, the roku remote would
first send 0x574332CD then the repeats would be 0x574332CC until you
let go of the button.



